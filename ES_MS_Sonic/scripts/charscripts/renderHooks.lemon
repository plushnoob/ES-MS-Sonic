global u8 Char_num_SMS = 5
global u8 SMS_Zone_Banner
global u8 MS_Banner_text
global u8 SMS_Display_Banner
global u8 SMS_in_Text
global u8 SMSsparks1
global u8 SMSsparks2
global u8 SMSpilot



function string LivesandContinuesSMS()
{
	return  "dataSel_lifeContinue_slot91"
}
function string getSMSSprite()
{
	return (SMSPalette == 0) ? "dataSel_slot91" : (SMSPalette == 1) ? "dataSel_s1" : (SMSPalette == 2) ? "dataSel_tt" : (SMSPalette == 3) ? "dataSel_blast" : (SMSPalette == 4) ? "dataSel_SMSR" : (SMSPalette == 5) ? "dataSel_lunar" : ( SMSPalette == 6) ? "dataSel_oma" : ( SMSPalette == 7) ? "dataSel_S3" : "dataSel_P"
}
// best ending stuff
function string getSMSSpriteBE()
{
	return (SMSPalette == 0) ? "BE_legacy" : (SMSPalette == 1) ? "BE_s1" : (SMSPalette == 2) ? "BE_tt" : (SMSPalette == 3) ? "BE_blast" : ( SMSPalette == 4) ? "BE_SMSR" : ( SMSPalette == 5) ? "BE_lunar" : ( SMSPalette == 6) ? "BE_oma" : ( SMSPalette == 7) ? "BE_S3" : "BE_P"
}
function string Special_Continue_icons_SMS()
{
		return "Continue_icon_Slot91"
}
function string sms_Continue_icons()
{
	return stringformat("sms_continue_0x%02x", objA0.animation.sprite)
}
function bool ESS_drawChar_Es(s16 px, s16 py, bool no_save, u8 ES_val)
{
	if (ES_val == 91)
	{
		u16 renderQueue = 0x6000
		
		u8 atex = getatex(91)
		string key = getSMSSprite()
		{
			if (Renderer.hasCustomSprite(key))
				Renderer.drawCustomSprite(key, px, py, atex, 0, renderQueue)
		}
		return true
	}
	
	return base.ESS_drawChar_Es(px, py, no_save, ES_val)
}

function void ExtraChar.DataSelect.drawCharacterSprite(s16 px, s16 py, u16 renderQueue)
{
	if (objA0.animation.timer == 91)
	{
		u8 atex = getatex(91)
		string key = getSMSSprite()
		{
			if (Renderer.hasCustomSprite(key))
				Renderer.drawCustomSprite(key, px, py, atex, SPRITE_FLAG_PRIO, renderQueue)
		}
		return
	}
	
	// Call the base function
	base.ExtraChar.DataSelect.drawCharacterSprite(px, py, renderQueue)
}
function bool Standalone.onWriteToSpriteTable(s16 px, s16 py, u16 renderQueue)
{

	u8 gameMode = global.game_mode & 0x7f
	bool prioFlag = (objA0.sprite_attributes & 0x8000) != 0
	if (gameMode == 0x0c || gameMode == 0x08)
	u8 atex
	u64 key
	u8 flags = ((objA0.render_flags & 0x01) ? SPRITE_FLAG_FLIP_X : 0) | ((objA0.render_flags & 0x02) ? SPRITE_FLAG_FLIP_Y : 0) | ((objA0.sprite_attributes & 0x8000) ? SPRITE_FLAG_PRIO : 0)
	// random fact ray can partner up with anybody that uses sonic if the option is set to 4 "all three"
	bool israypartner = (Mods.isModActive("Extra Slot Ray") && System.getGlobalVariableValueByName("Ray_Partner") == 4)
	
	{
		//SIGNPOST
		if(objA0.update_address == 0x0837b2 && XtraChar == 91)
		{			
			if(objA0.animation.sprite == 0x00 && XtraChar == 91)//SONIC
			{		
				atex = 0x40 + 0x20 * getMainCharacter()
				Renderer.drawCustomSprite((SMSPalette == 1) ? "goal_S1" : "goal_sms", px, py, atex, prioFlag ? SPRITE_FLAG_PRIO : 0 , renderQueue)
				return true
			}		
		}		
	}
    // data select sprites
	if (u8[A0 + 0x38] == 0xff && objA0.animation.sprite == 5 && objA0.animation.timer == 91 && u16[0xffffb04a + 0x30] == 0)
	{	
		u64 portrait = 0
		if (u8[A0 + 0x23] == 0x18)
			portrait = "dataSel_savePortrait_slot91"
		else if (u8[A0 + 0x23] == 0x19)
			portrait = "dataSel_savePortrait_superslot91"
		else if (u8[A0 + 0x23] == 0x1b)
			portrait = "Clear_slot91"
		if (Renderer.hasCustomSprite(portrait))
		{
		#if GAMEAPP >= 0x22051500
			Renderer.drawCustomSprite(portrait, px, py - ((Mods.isModActive("Data Select Character Sprites - MAIN") && System.getGlobalVariableValueByName("MenuStyle.dataSelect") == 0) ? 8 : 0), 0, SPRITE_FLAG_PRIO, renderQueue)
		#endif
		#if GAMEAPP <= 0x22050800
			Renderer.drawCustomSprite(portrait, px, py, 0, SPRITE_FLAG_PRIO, renderQueue)
		#endif
			u8[A0 + 0x23] = 0
		}
	}
	// best ending screen the one where theres a logo behind everyone
	if (objA0.update_address == 0x1ffbe0 || objA0.update_address == 0x1ffbd0)
	{
		if (objA0.value3a == 91)
		{
			key = getSMSSpriteBE()
		    if (Renderer.hasCustomSprite(key))
		    {
			Renderer.drawCustomSprite(key, px, py, atex, flags, objA0.value42 + 0xff)
			return true
		    }
		}
	}
	if (global.xtrachar ==  91)
	{
		if (objA0.update_address == 0x02ea50 || objA0.update_address == 0x02ec1e || objA0.update_address == 0x02dd98)
		{
			if (objA0.animation.sprite >= 0x13 && objA0.animation.sprite <= 0x16)
			{
				atex = getMainCharacter()
				Renderer.drawCustomSprite("SMS_text", px , py, atex, SPRITE_FLAG_PRIO, renderQueue)
				return true
			}
			if (objA0.animation.sprite == 0x12)
			{
				atex = getMainCharacter()
					if (global.super_emeralds == 7) // HYPER
						Renderer.drawCustomSprite("SMSH_text", px, py, atex, SPRITE_FLAG_PRIO, renderQueue)
					else // SUPER
						Renderer.drawCustomSprite("SMSS_text", px, py, atex, SPRITE_FLAG_PRIO, renderQueue)
					return true
			}
		}
	////Star rendering
	if (objA0.update_address == 0x20008e)
	{
		push(A1)
		A1 = 0xffffb000						
		//update the render flags with the player's
		//so the stars are always correct and go behind waterfalls//effects etc
			objA0.render_flags = objA1.render_flags
			objA0.sprite_priority = objA1.sprite_priority
			objA0.sprite_attributes = objA1.sprite_attributes			
		//restore A1
		A1 = pop()
		renderQueue = 0xa000 - objA0.sprite_priority +1 //just give it a priority higher than the player
		prioFlag = (objA0.sprite_attributes & sprite_attribute.PRIORITY) != 0
		//this just has to render the proper frame based on its sprite value
		if (!super.active || SMSsparks2 == 0)
			key = stringformat((SMSsparks1 == 0) ? "spark_0x%02x" : (SMSsparks1 == 1) ? "spark_s3_0x%02x" : (SMSsparks1 == 2) ? "spark_b_0x%02x" : "spark_c_0x%02x", objA0.animation.sprite)
		else
			key = stringformat((SMSsparks2 == 1) ? "sparks_K_0x%02x" : "sparks_SK_0x%02x", objA0.animation.sprite)
		//System.writeDisplayLine(stringformat("sprite: %02x", renderQueue))		
		//as always we're in register A0 so we can read from "char."		
		//render the stars not on px and py but offset them by rotation
		Renderer.drawCustomSprite(key, px + objA0.velocity.x , py + objA0.velocity.y, 0x00, prioFlag ? SPRITE_FLAG_PRIO : 0, renderQueue, 0, 255)//0 is the angle				
		return true				
	}

	//Blast star
	////Star rendering
	if (objA0.update_address == 0x20008a)
	{
		push(A1)
		A1 = 0xffffb000						
		//update the render flags with the player's
		//so the stars are always correct and go behind waterfalls//effects etc
			objA0.render_flags = objA1.render_flags
			objA0.sprite_priority = objA1.sprite_priority
			objA0.sprite_attributes = objA1.sprite_attributes			
		//restore A1
		A1 = pop()
		renderQueue = 0xa000 - objA0.sprite_priority +1 //just give it a priority higher than the player
		prioFlag = (objA0.sprite_attributes & sprite_attribute.PRIORITY) != 0
		//this just has to render the proper frame based on its sprite value
		//share with normal sparks
		if (!super.active || SMSsparks2 == 0)
			key = stringformat((SMSsparks1 == 0) ? "spark_0x%02x" : (SMSsparks1 == 1) ? "spark_s3_0x%02x" : (SMSsparks1 == 2) ? "spark_b_0x%02x" : "spark_c_0x%02x", objA0.animation.sprite)
		else
			key = stringformat((SMSsparks2 == 1) ? "sparks_k_0x%02x" : "sparks_SK_0x%02x", objA0.animation.sprite)
		//System.writeDisplayLine(stringformat("sprite: %02x", renderQueue))		
		//as always we're in register A0 so we can read from "char."		
		//render the stars not on px and py but offset them by rotation
		Renderer.drawCustomSprite(key, px, py, 0x00, prioFlag ? SPRITE_FLAG_PRIO : 0, renderQueue, 0, 255)//0 is the angle				
		return true				
	}
		
		//ending pose
		if (objA0.update_address == 0x05e18a)
		{
			u8 character = getMainCharacter()
			atex = 0x40 + character * 0x20
			key = (outro.ending_type < 0) ? stringformat("endpose_sms_0x%02x", objA0.animation.sprite) : "endpose_supersms"

			if (Renderer.hasCustomSprite(key))
			{
				Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue)
				return true
			}
		}
		//ENDING normal sized
	    // ray
		if (objA0.update_address == 0x05ebb4 && SMSpilot == 1 && Mods.isModActive("Extra Slot Ray") && !israypartner)
		{
			key = "R_pilot"
			Renderer.drawCustomSprite(key, px, py, 0, flags, renderQueue)
			return true
		}
		if (objA0.update_address == 0x05ed18) //standing character
		{
			if (objA0.subtype2c != 0) //standing character
			{
				atex = 0x40 + getMainCharacter() * 0x20
				key = "SMSmini"
				Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue, 0, 255)		
				return true
			}
			else //pilot
			{ // DON'T RENDER HERE
				if (SMSpilot == 1 && Mods.isModActive("Extra Slot Ray"))
				{

					key = "R_small"
					Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue, 0, 255)		
					return true
				}
				else
					return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
			}
		}
		if (global.game_mode == 0x14)
		{
			// Continue Icons
			if (objA0.update_address == 0x05ca5c)
			{
				atex = 0x40 + getMainCharacter() * 0x20
				key = sms_Continue_icons()
				if (Renderer.hasCustomSprite(key))
				{
				Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue)
				return true
				}
			}

			//waiting & running
			if (!havepart)
			{
				if (objA0.update_address == 0x05c660)
				{
					atex = 0x40 + getMainCharacter() * 0x20
						key = stringformat("character_slot91_0x%02x", objA0.animation.sprite)
					if (objA0.animation.sprite < 0x21 && objA0.animation.sprite > 0x30) // dont override shadows running anim
					{
					Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue)
					return true
					}
				}
			}
			else
			{
				if (objA0.update_address == 0x05c55c || objA0.update_address == 0x05c588)
				{
					atex = 0x40 + getMainCharacter() * 0x20
						key = stringformat("character_slot91_0x%02x", objA0.animation.sprite)
					if (objA0.animation.sprite < 0x21 && objA0.animation.sprite > 0x30) // dont override shadows running anim
					{
						Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue)
						return true
					}
				}
			}
		}
		// Continue icon
		if ((objA0.update_address == 0x02ebe8 || objA0.update_address == 0x02ec4a) && objA0.animation.sprite >= 0x29 && objA0.animation.sprite <= 0x2b)
		{
			key = "sms_continue"
			Renderer.drawCustomSprite(key, px, py, 0x49, flags, renderQueue)
			return true
		}
        //Bluespheres Palette
		if (gameMode == 0x34 || gameMode == 0x48 || gameMode == 0x2c || gameMode == 0x30 || global.game_mode == 0x85 || global.game_mode == 0x87) && ((global.xtrachar == 91))
		{
			if (bluespheres.xtrachar)
			{
				if (char.animation.sprite >= 0xb0 && char.animation.sprite <= 0xb4 && objA0.update_address != 0x04e202 && objA0.update_address != 0x04e2f0)
				{
					key = (SMSPalette == 0) ? "dataSel_slot91" : (SMSPalette == 1) ? "dataSel_s1" : (SMSPalette == 2) ? "dataSel_tt" : (SMSPalette == 3) ? "dataSel_blast" : (SMSPalette == 4) ? "dataSel_SMSR" : (SMSPalette == 5) ? "dataSel_lunar" : (SMSPalette == 6) ? "dataSel_oma" : ( SMSPalette == 7) ? "dataSel_S3" : "dataSel_P"
					s16 py2 = py + 0x0d
						Renderer.drawCustomSprite(key, px, py2, 0x00, flags, renderQueue + 1)
					if (objA0.animation.sprite == 0xb4)
						objA0.animation.sprite = 0xb1

						key = stringformat("character_slot91_0x%02x", objA0.animation.sprite)
					
					Renderer.drawCustomSprite(key, px, py, atex, flags, renderQueue)

					return true
				}
				// ray stuff
				else if (Mods.isModActive("Extra Slot Ray") && objA0.update_address == 0x04e29c)
				{
					u8 atex2 = getatex(0x02)
					u8 animation = ((global.framecounter >> 3) % (4) + 0xb1)
					key = (System.getGlobalVariableValueByName("Ray_Sprite_type") == 0) ? stringformat("Mania_Ray_0x%02x", animation) : stringformat("character_slot2_0x%02x", animation)
					if (animation == 0xb4)
					{
						key = (System.getGlobalVariableValueByName("Ray_Sprite_type") == 0) ? "Mania_Ray_0xb2" : "character_slot2_0xb2"
					}
					Renderer.drawCustomSprite(key, px, py, atex2, flags, renderQueue)
					return true
				}
			}
	
			// Characters in special stage
			if (objA0.update_address == 0x00903e)// || objA0.update_address == 0x00927a Just player one, thanks!
			{
				u8 character = getMainCharacter()
				atex = 0x40 + character * 0x20
					
					key = stringformat("bluesphere_slot91_0x%02x", objA0.animation.sprite)
				
                 u64 palettekey = (SMSPalette == 0) ? "slot91palette_bluesphere_legacy" : (SMSPalette == 1) ? "slot91palette_bluesphere_s1" : (SMSPalette == 2) ? "slot91palette_bluesphere_tt" : (SMSPalette == 3) ?"slot91palette_bluesphere_blast" : (SMSPalette == 4) ? "slot91palette_bluesphere_SMSR" :  (SMSPalette == 5)  ? "slot91palette_bluesphere_speedster" :  (SMSPalette == 5)  ? "slot91palette_bluesphere_oma" : (SMSPalette == 6)  ? "slot91palette_bluesphere_S3" : "slot91palette_bluesphere_P"
				
				if (Renderer.hasCustomSprite(key))
				{
					if (System.hasExternalPaletteData(palettekey, 0))
					{
						atex = 0x40 + character * 0x20
					}
				}
				Renderer.drawCustomSprite(key, px, py, atex, prioFlag ? SPRITE_FLAG_PRIO : 0, renderQueue)
				return true
			}
			if (global.characters == CHARS_SONIC_AND_TAILS && objA0.update_address == 0x00927a)
			{
				#if GAMEAPP >= 0x22051500
					if (israypartner)
						return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
				#endif
				u8 character = getSecondCharacter()
				atex = (character == CHARACTER_TAILS) ? 0x10 : 0x00
				u64 paletteKey = (character == CHARACTER_SONIC) ? "bluesphere_palette_sonic" : (character == CHARACTER_TAILS) ? "bluesphere_palette_tails" : "bluesphere_palette_knuckles"
				key = stringformat((character == CHARACTER_SONIC) ? "bluesphere_sonic_0x%02x" : (character == CHARACTER_TAILS) ? "bluesphere_tails_0x%02x" : "bluesphere_knuckles_0x%02x", objA0.animation.sprite)
				u16 numColors = System.loadExternalPaletteData(paletteKey, 0, 0x800000, 0x20)
				if (numColors > 0)
				{
					u32 dest = 0x802180 + character * 0x40
					for (u16 i = 0; i < numColors; ++i)
					{
						u16[dest + i * 2] = packColor(u32[0x800000 + i * 4])
					}
				} 
				if (Renderer.hasCustomSprite(key))
				{
					if (System.hasExternalPaletteData(paletteKey, 0))
					{
						atex = 0x40 + character * 0x20
					}
				}
				else
				{
					if (character == CHARACTER_SONIC)
						key = Renderer.setupCustomCharacterSprite(0x0aaa7c, 0x0abe14, objA0.mapping_offset, objA0.animation.sprite, 0x00)
					else if (character == CHARACTER_TAILS)
						key = Renderer.setupCustomCharacterSprite(0x28f95a, 0x2908d2, objA0.mapping_offset, objA0.animation.sprite, 0x10)
					else
						key = Renderer.setupCustomCharacterSprite(0x0abf22, 0x0ad31a, objA0.mapping_offset, objA0.animation.sprite, 0x00)
				}
				Renderer.drawCustomSprite(key, px, py, atex, prioFlag ? SPRITE_FLAG_PRIO : 0, renderQueue)
				return true
			}
			
			// Tails' tails object in special stage isn't here...look in the real onWriteToSpriteTable!		
		}
    	if (objA0.update_address == 0x02d8e2) //&& global.zone != 0x0c
		{
			if (SMS_Display_Banner && global.zone == 0x0c)
			return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
			else if (SMS_Zone_Banner == 1)
			{
				if (SMS_in_Text == 1)
				{
					key = (MS_Banner_text == 0) ? "A" : (MS_Banner_text == 1) ? "A_S3_air" : (MS_Banner_text == 2) ? "A_S3" : (MS_Banner_text == 3) ? "A_S&K" : "A_S3&K"
					Renderer.drawCustomSprite(stringformat("titlecards_D%s", key), px - 0x20, py - 0x40, 0x00, SPRITE_FLAG_PRIO | SPRITE_FLAG_NO_GLOBAL_TINT, renderQueue)
				}
				else
				{
					key = (MS_Banner_text == 0) ? "DA" : (MS_Banner_text == 1) ? "air_DA" : (MS_Banner_text == 2) ? "S3_DA" : (MS_Banner_text == 3) ? "S&K_DA" : "S3&K_DA"
					Renderer.drawCustomSprite(stringformat("titlecards_MS_in_%s", key), px - 0x20, py - 0x40, 0x00, SPRITE_FLAG_PRIO | SPRITE_FLAG_NO_GLOBAL_TINT, renderQueue)
				}
				return true
			}
			else
			{
				if (SMS_in_Text == 0)
				{
					key = (MS_Banner_text == 0) ? "DAGE_def" : (MS_Banner_text == 1) ? "S3_air" : (MS_Banner_text == 2) ? "S3" : (MS_Banner_text == 3) ? "S&K" : "S3&K"
					Renderer.drawCustomSprite(stringformat("titleCards_MS_in_%s", key), px - 0x20, py - 0x40, 0x00, SPRITE_FLAG_PRIO | SPRITE_FLAG_NO_GLOBAL_TINT, renderQueue)
					return true
				}
			}
		}
    }
		return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
}	
//# address-hook(0x0081c6) end(0x00858e)
function void SpecialStage()
{
	if (global.xtrachar != 91)
	{
		base.SpecialStage()
		return
	}
#if STANDALONE
	playMusic(MUSIC_CTRL_FADEOUT)
#else
	playMusic(MUSIC_CTRL_STOP)
#endif

	kosinski.queue_size = 0
	zeroMemory(0xffffff10, 0x6c)

	ClearPatternLoadingQueue()
	FadeScreenToWhiteBlocking()

#if STANDALONE
	// Add a small artificial delay here
	for (u8 i = 0; i < 12; ++i)
		yieldInWhiteScreen()
//#else
	//set_status_register(0x2700)
#endif

	VDP.Config.enableHInt(false)
	VDP.Config.setNameTableBasePlaneA(0xc000)
	VDP.Config.setNameTableBasePlaneB(0xe000)
	VDP.Config.setPlayfieldSizeInPixels(512, 256)
	VDP.Config.setupWindowPlane(false, 0)	// Disable window plane
	VDP.Config.setVerticalScrolling(false, 0)
	VDP.Config.setBackdropColor(0x20)
	VDP.Config.setRenderingModeConfiguration(false)
	water.fullscreen = 0

	fn0011ca()

	zeroMemory(0xffffac00, 0x400)
	zeroMemory(0xffffb000, 0x2000)
	zeroMemory(0xfffffe6e, 0x4c)
	zeroMemory(0xffffe400, 0x100)

	u32[0xfffffe66] = 0
	u32[0xfffffe6a] = 0

	fn01aa6e()

	u16[0xfffffb00] = 0
	u32[0xfffffbfc] = 0xfffffb00

	// Load special stage palette
	//  -> Character colors is the 8 colors from 0xfffffc90 (for Sonic/Knuckles) and 0xfffffcb0 (for Tails)
	copyMemory(0xfffffc80, 0x00896e, 0x100)
	/*if (isMainCharacter(CHARACTER_KNUCKLES))
	{
		copyMemory(0xfffffc90, 0x0089ee, 0x10)
	}*/

#if STANDALONE
        u64 palettekey = (SMSPalette == 0) ? "slot91palette_bluesphere_legacy" : (SMSPalette == 1) ? "slot91palette_bluesphere_s1" : (SMSPalette == 2) ? "slot91palette_bluesphere_tt" : (SMSPalette == 3) ?"slot91palette_bluesphere_blast" : (SMSPalette == 4) ? "slot91palette_bluesphere_SMSR" :  (SMSPalette == 5)  ? "slot91palette_bluesphere_speedster" : (SMSPalette == 5)  ? "slot91palette_bluesphere_oma" : (SMSPalette == 6)  ? "slot91palette_bluesphere_S3" : "slot91palette_bluesphere_P"
		
		u16 numColors = System.loadExternalPaletteData(palettekey, 0, 0x800000, 0x20)

		if (numColors > 0)
		{
			u32 dest = 0x802180 + getMainCharacter() * 0x40
			for (u16 i = 0; i < numColors; ++i)
			{
				u16[dest + i * 2] = packColor(u32[0x800000 + i * 4])
			}
		}
#endif

	Nemesis.loadDataToVRAM(0x0b07b8, SpecialStage.CheckerFloor.targetInVRAM)		// Checkered Floor

	fn0085b0()

	// Checkered Floor mapping
	Enigma.decompress(0x0aef54, 0xffff5500, (SpecialStage.CheckerFloor.targetInVRAM >> 5))
	copyRectToVRAM(0xffff5500, 0xc000, 0x28, 0x1c)

	Nemesis.loadDataToVRAM(0x0ad904, 0xd000)		// Sphere sprites
	Nemesis.loadDataToVRAM(0x0adf60, 0xb4e0)		// Special stage ring sprites
	Nemesis.loadDataToVRAM(0x0aeed0, SpecialStage.Background.targetInVRAM)
	Nemesis.loadDataToVRAM(0x0ad472, SpecialStage.TextPromps.targetInVRAM)		// "get blue spheres" and "perfect" text
	Nemesis.loadDataToVRAM(0x0ad5f4, 0xdf00)		// Arrow-like icon accompanying the above text
	Nemesis.loadDataToVRAM(0x0ad650, 0xf020)		// Special Stage HUD digits

	A0 = 0x0ad650
	A4 = 0xffffe020
	fn0015cc()

	Nemesis.loadDataToVRAM(0x0ad7bc, SpecialStage.HUDIcons.targetInVRAM)		// Special Stage HUD icons
	Nemesis.loadDataToVRAM(0x0ad430, 0xf400)		// Shadows

	copyRectToVRAM(0x008d2c, 0xc084, 0x08, 0x03)
	copyRectToVRAM(0x008d2c, 0xc0bc, 0x08, 0x03)

	Enigma.decompress(0x0aedb0, 0xffff0000, (sprite_attribute.PALETTE.LINE2 | (SpecialStage.Background.targetInVRAM >> 5)))
	copyRectToVRAM(0xffff0000, 0xe000, 0x40, 0x20)

	Kosinski.decompress(0x0b2e36, 0xffff0000)

	fn009ea0()
	fn00a0e6()

	global.level_started = 0
	bluespheres.bs_hud_dirty = 0xff
	bluespheres.rings_flags = 0x80
	bluespheres.current_gamespeed = 0x1000
	bluespheres.speedup_countdown = BlueSpheres.useGeneratedStages() ? 2700 : 1800
	camera.foreground.x.u16 = 0
	camera.foreground.y.u16 = 0
	level.height.bitmask = 0xffff

	u32[0xffffb000] = 0x008faa
	if (getNumPlayers() >= 2)
	{
		u32[0xffffb04a] = 0x009212
	}
	u32[0xffffb094] = 0x008df8
	u32[0xffffb0de] = 0x008e40
	UpdateGameObjects()

	fn009d9e()
	fn009dde()
	RenderSprites()

	BlueSpheres.RenderSpheres()
	fn009d5e()

	bluespheres.stage_exit_animation = 1
	global.frame_state = 0x1c

	waitForNextFrame()

	bluespheres.stage_exit_animation = 0
	VDP.Config.setRenderingModeConfiguration(true)		// Enable shadow/highlight palette mode

	global.demo_countdown = 1800
	fn0075d2()

#if STANDALONE
	if (BlueSpheres.useGeneratedStages())
	{
		playMusic(0xf8)		// Different music track, one that speeds up the music only every 45 (instead of 30) seconds
	}
	else
#endif
	{
		playMusic(0x1c)
	}

	VDP.Config.setActiveDisplay(true)
	BlueSpheres.FadeIn()

	while (true)
	{
		UpdateGamePause()
		global.frame_state = 0x1c
		Kosinski.ProcessDecompressionQueue()

		waitForNextFrame()
	@EntryPoint:

		++level.framecounter
		UpdateRollingDemo()
		UpdateGameObjects()

		fn009d9e()
		fn009dde()
		RenderSprites()

		BlueSpheres.RenderSpheres()
		BlueSpheres.RenderCharacterSprites()
		fn009d5e()
		fn009b62()

	#if GAMEAPP
		BlueSpheres.renderCustomGround()
		BlueSpheres.renderCustomCharacterShadows()
	#elif STANDALONE
		Renderer.setViewport(getScreenExtend(), 0, 320, 224, 0x0000)
	#endif

		LoadRequiredSpritePatterns()
		Kosinski.ProcessModules()

		if (global.rolling_demo && global.demo_countdown == 0)
			break

		if (global.game_mode != 0x34)	// Blue Spheres game mode
			break

	#if STANDALONE
		// Only needed to support restart from the Pause Menu
		//  -> Not used at the moment, so nevermind
		if (level.restart)
		{
			global.game_mode = 0x0c
			return
		}
	#endif
	}

	if (global.rolling_demo)
	{
		global.game_mode = 0
	}

	global.demo_countdown = 60
	palette_fade.range = 0x003f
	global.fadeout_countdown = 0

	while (true)
	{
		global.frame_state = 0x1c

		waitForNextFrame()

		UpdateRollingDemo()
		UpdateGameObjects()

		fn009d9e()
		fn009dde()
		RenderSprites()

		BlueSpheres.RenderSpheres()
		fn009d5e()
		fn009b62()

	#if GAMEAPP
		BlueSpheres.renderCustomGround()
		BlueSpheres.renderCustomCharacterShadows()
	#elif STANDALONE
		Renderer.setViewport(getScreenExtend(), 0, 320, 224, 0x0000)
	#endif

		LoadRequiredSpritePatterns()
		Kosinski.ProcessModules()

		--global.fadeout_countdown
		if (s16(global.fadeout_countdown) < 0)
		{
			global.fadeout_countdown = 2
			FadePaletteToWhite()
		}

		if (global.demo_countdown == 0)
			break
	}
}
//palettes
//SET THE PALETTE -- REGULAR GAME HAS ITS OWN ENTRY
function string getCharacterPaletteKey(u8 character)
{
	if (XtraChar == 91 && character == CHARACTER_SONIC)
	{
		    if      (SMSPalette == 0)
			return "slot91palette_legacy"
		    else if (SMSPalette == 1)
			return "slot91palette_s1"
            else if (SMSPalette == 2)
			return "slot91palette_tt"
            else if (SMSPalette == 3)
			return "slot91palette_blast"
		    else if (SMSPalette == 4)
			return "slot91palette_SMSR"
	        else if (SMSPalette == 5)
			return "slot91palette_speedster"
	        else if (SMSPalette == 6)
			return "slot91palette_oma"
			else if (SMSPalette == 7)
			return "slot91palette_S3C"
			else if (SMSPalette == 8)
			return "slot91palette_P"
	}
    return base.getCharacterPaletteKey(character)
}
function string getManiaInspSignpost(u8 character)
{
	u64 key = 0x00

	if (global.xtrachar == 91 && character == CHARACTER_SONIC)
		key = (SMSPalette == 1) ? "Mania_signpost_slot91_s1" : "Mania_signpost_slot91"

	if (key != 0x00 && Renderer.hasCustomSprite(key))
		return key

	return base.getManiaInspSignpost(character)
}
//ending pose stuff
function string getCharacterEndPosePaletteKey(u8 character)
{
    if (global.xtrachar != 91)
    {
        return base.getCharacterEndPosePaletteKey(character)
    }

    return (SMSPalette == 0) ? "endpose_palette_L" : (SMSPalette == 1) ? "endpose_palette_s1" : (SMSPalette == 2) ? "endpose_palette_tt" : (SMSPalette == 3) ? "endpose_palette_blast" : (SMSPalette == 4) ? "endpose_palette_SMSR" : (SMSPalette == 5) ? "endpose_palette_lunar" : (SMSPalette == 6) ? "endpose_palette_S3" : "endpose_palette_P"
}