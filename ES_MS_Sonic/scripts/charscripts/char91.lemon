include renderHooks
include sonicRendering
include gameplayChanges
include sonicActions
include 3D2DStars
global u8 SMsflicker
global bool havepart
global u8 Sonic.CountCAM
function void ExtraChar.startup_char91()
{
	global.characters = (havepart == 0) ? CHARS_SONIC_ALONE : CHARS_SONIC_AND_TAILS
}
global u64 DAGE_continueSpriteName = "continue_icon_mssonic"
function string RenderExtraCharIcon(u8 xtrachar)
{
	if (xtrachar == 91)
	{
		u64 names = (SMSPalette == 0) ? "legacy" : (SMSPalette == 1) ? "s1" : (SMSPalette == 2) ? "s2" : (SMSPalette == 3) ? "tt" : (SMSPalette == 4) ? "blast" : (SMSPalette == 5) ? "SMSR" : (SMSPalette == 6) ? "lunar" : (SMSPalette == 7) ? "shima" :"B&PS"
		return stringformat("level_select_S3C_%s", names)
	}
	return base.RenderExtraCharIcon(xtrachar)
}
function u64 getCharacterBonusTextIcon(u8 character)
{
	if (XtraChar == 91)
	{
		return "hud_bonus_icon_slot91"
	}
	else
		return base.getCharacterBonusTextIcon(character)
}

function bool ExtraChar.renderHUD_char91()
{
#if STANDALONE
	if (DEBUG_DISABLE_HUD)
		return false
#endif

	s16 baseX = global.level_started
	if (baseX < 0)
	{
		baseX += 8
		global.level_started = baseX
	}
	baseX += 0x0f
	s16 baseY = 0x08
	u16 renderQueue = 0xe000

	bool isBonusStage = (global.zone >= 0x13 && global.zone <= 0x15)
#if STANDALONE
	if (!debug_mode.state)
	{
		if (!isBonusStage)
		{
			// Score
			HUD.drawSprite("hud_text_score", baseX, baseY, renderQueue)
			++renderQueue
			HUD.drawNumber("hud_digit_%d", player.score * 10, baseX + 0x58, baseY, renderQueue)
			++renderQueue

			// Time
			{
				bool show = (timer.minutes < 9 || isBonusStage || (level.framecounter & 0x08) || Game.getSetting(SETTING_INFINITE_TIME))
				HUD.drawSprite(show ? "hud_text_time" : "hud_text_time_red", baseX, baseY + 0x10, renderQueue)
				++renderQueue

				// Unfortunately, the time progress is done later inside the frame, so we don't have the right value in "timer.frames" yet
				//  -> If the conditions for time progress are met, add one and everything will be alright
				u16 minutes = timer.minutes
				u16 seconds = timer.seconds
				u16 frames = timer.frames
				if (hud.dirty.timer && !global.game.paused && timer.alldata < 0x93b3b)	// That is 9:59 and 59 frames
				{
					++frames
					seconds += (frames / 60)
					minutes += (seconds / 60)
					frames %= 60
					seconds %= 60
				}
				u16 centiseconds = (frames * 99 + 30) / 59

				u16 px = (minutes >= 10) ? (baseX + 8) : baseX
				if (Game.getSetting(SETTING_EXTENDED_HUD))
				{
					if (minutes >= 10)
						HUD.drawDigit(minutes / 10, px + 0x20, baseY + 0x10, renderQueue)
					HUD.drawDigit(minutes % 10, px + 0x28, baseY + 0x10, renderQueue)
					HUD.drawSprite("hud_char_minutes", px + 0x30, baseY + 0x10, renderQueue)
					HUD.drawDigit(seconds / 10, px + 0x38, baseY + 0x10, renderQueue)
					HUD.drawDigit(seconds % 10, px + 0x40, baseY + 0x10, renderQueue)
					HUD.drawSprite("hud_char_seconds", px + 0x48, baseY + 0x10, renderQueue)
					HUD.drawDigit(centiseconds / 10, px + 0x50, baseY + 0x10, renderQueue)
					if (minutes < 10)
						HUD.drawDigit(centiseconds % 10, px + 0x58, baseY + 0x10, renderQueue)
				}
				else
				{
					if (minutes >= 10)
						HUD.drawDigit(minutes / 10, px + 0x20, baseY + 0x10, renderQueue)
					HUD.drawDigit(minutes % 10, px + 0x28, baseY + 0x10, renderQueue)
					HUD.drawSprite("hud_char_colon", px + 0x30, baseY + 0x10, renderQueue)
					HUD.drawDigit(seconds / 10, px + 0x38, baseY + 0x10, renderQueue)
					HUD.drawDigit(seconds % 10, px + 0x40, baseY + 0x10, renderQueue)
				}
				++renderQueue
			}
		}

		// Rings
		{
			u16 py = (isBonusStage) ? baseY : baseY + 0x20
			bool show = (ring_counter != 0 || (level.framecounter & 0x08))
			HUD.drawSprite(show ? "hud_text_rings" : "hud_text_rings_red", baseX, py, renderQueue)
			++renderQueue

			u16 px = baseX + (!isBonusStage && Game.getSetting(SETTING_EXTENDED_HUD) ? 0x58 : 0x40)
			for (u32 value = ring_counter;;)
			{
				HUD.drawDigit(value % 10, px, py, renderQueue)
				px -= 8
				value /= 10
				if (value == 0)
					break
			}
			++renderQueue
		}

		// Lives (not visible in Time Attack or with infinite lives setting)
		if (!Game.isTimeAttack() && !Game.getSetting(SETTING_INFINITE_LIVES))
		{
			bool useMobilePosition = HUD.useMobileLivesDisplay()
			u16 px = useMobilePosition ? (getScreenWidth() - baseX - 0x30) : baseX
			u16 py = useMobilePosition ? baseY : 200

			HUD.drawSprite("hud_lives_icon_slot91", px, py, renderQueue)
			++renderQueue

			if (lives_counter >= 10)
				HUD.drawSmallDigit(u16((lives_counter / 10) % 10), px + 0x20, py + 8, renderQueue)
			HUD.drawSmallDigit(u16(lives_counter % 10), px + 0x28, py + 8, renderQueue)
		}
	}
	else
#endif
	{
		D4 = (isBonusStage) ? 8 : 0

		if ((level.framecounter & 0x08) == 0)
		{
			if (ring_counter == 0)
			{
				D4 += 2		// Set rings HUD text to flicker
			}
			if (timer.minutes == 9 && !isBonusStage)
			{
				D4 += 4		// Set timer HUD text to flicker
			}
		}

		// Targets:
		//  - 0x00dbc2	-> D4.u16 = 0x00		// Complete HUD text
		//  - 0x00dc00	-> D4.u16 = 0x02		// HUD with rings text flickering
		//  - 0x00dc32	-> D4.u16 = 0x04		// HUD with time text flickering
		//  - 0x00dc6a	-> D4.u16 = 0x06		// HUD with both rings and time flickering
		//  - 0x00dc96	-> D4.u16 = 0x08		// Bonus stage HUD
		//  - 0x00dcb6	-> D4.u16 = 0x0a		// Bonus stage HUD with rings text flickering
		A1 = tableLookupAddress(0x00dbb6, D4.u16)

		D4.s16 = u16[A1] - 1
		D0.s16 = baseX + 0x80
		D1.u16 = 0x0108
		D5.u16 = 0x86ca
		A1 += 2
		if (D4.s16 >= 0)
		{
			writeToSpriteTable(renderQueue)
		}
	}
	return true
}

function u64 ExtraChar.getIconSpriteKey_char91(u8 type)
{
	if (type == 0)
		return "monitor_icon_static"
	else if (type == 0x01)
		return "monitor91_icon_sms"
	else if (type == 0x02)
		return "monitor_icon_robotnik"
	else if (type == 0x03)
		return "monitor_icon_ring"
	else if (type == 0x04)
		return "monitor_icon_speedshoes"
	else if (type == 0x05)
		return "monitor_icon_fireshield"
	else if (type == 0x06)
		return "monitor_icon_lightningshield"
	else if (type == 0x07)
		return "monitor_icon_bubbleshield"
	else if (type == 0x08)
		return "monitor_icon_invincibility"
	else if (type == 0x09)
		return "monitor_icon_super"
	else if (type == 0x0b)
		return "monitor_icon_classicshield"

	return 0
}
// Sets the availability status of the character for selection in the Competition menu.
function bool ExtraChar.CompetitionMode.isCharacterAvailable(u8 xtrachar)
{
	
	if (xtrachar == 91)
		return false
	
	// Call the base function
	return base.ExtraChar.CompetitionMode.isCharacterAvailable(xtrachar)
}
function u64 GetXtraName(u8 xtrachar, u8 char)
{
	if (xtrachar == 91 && char == CHARACTER_SONIC)
		return "slot91"

	return base.GetXtraName(xtrachar, char)
}
function string getCharacterLivesIcon(u8 character)
{
	if (global.xtrachar == 0x91)
	{
		u64 characterName = "slot91"
		return stringformat("hud_lives_icon_%s", characterName)
	}
	return base.getCharacterLivesIcon(character)
}
// Returns the name of active Extra character.
function string ExtraChar.getCharacterName(u8 xtrachar)
{
		if (xtrachar == 91)
		return 	!(havepart) ? "M.S Sonic" : "M.S Sonic & Tails"
	 
	return base.ExtraChar.getCharacterName(xtrachar)
}
function string getESCharacterFallSpriteKey(u8 character, u8 extrachar)
{
	if (extrachar == 91 && character == CHARACTER_SONIC)
	{
		// he will stay consistent with his sprite types
		if (super.active && SMSsupertype == 0)
		{
		return "supersms_fall"
		}
		else if (super.active)
		{
		return "ssms_fall" 
	    }
		else
		{
		return "sms_fall"
		}
	}
	return base.getESCharacterFallSpriteKey(character, extrachar)
}
function s32 ESS_saveBoxGetColor_Es(u8 ES_val)
{
	if (ES_val == 91)
		return 0x48b6c7
	
	return base.ESS_saveBoxGetColor_Es(ES_val)
}
// da garden stuff
function void ExtraChar.Challenges.drawCharacterContinueSprite(u8 xtrachar, s16 px, s16 py, u8 flags, u16 renderQueue)
{
	if (xtrachar == 91)
	{
		string key = "SMS_DA"
		Renderer.drawCustomSprite(key, px, py, 0x00, flags, renderQueue)
		return
	}
	
	// Call the base function
	base.ExtraChar.Challenges.drawCharacterContinueSprite(xtrachar, px, py, flags, renderQueue)
}

//Sonic needs the fix to lock the camera in LRZ2, without it he can still softlock the cutscene if he is playing with tails
//Sonic has no eggrobo to kill, as sonic mode doesn't have them

//v1.3 LRZ2 fixes for sonic story
//lrz2 cutscene needs to lock the screen forward, and I have to remove some eggrobos

//# address-hook(0x063b40) end(0x063b8e)
function void fn063b40()
{
	if (XtraChar == 91 && !Mods.isModActive("Sonic 3: D.A. Garden Edition")||!isMainCharacter(CHARACTER_SONIC)) //only in sonic mode
	{
		base.fn063b40()
		return
	}
	//IN DA GARDEN WE NEED TO SLIDE THE CAMERA RIGHT TO 3800
	//I WANT THIS TO HAPPEN THROUGH A SLIDE FORWARD
	//move_area.left has to move by to 3800
	
	A1 = 0xffffb000
	A2 = 0x063b94
	fn0858c8()
	if (_equal())
		return

	objA0.update_address = 0x063b9c
	move_area.left = camera.position.x.u16
		
	if (allocDynamicObjectStd())
	{
		// Spawn Cutscene Knuckles
		objA1.update_address = 0x061d4c
		objA1.subtype2c = 0x24
		//activate scroll and eggrobo clearing
		Sonic.CountCAM = 1
	}

	fn065dd6()

	if (allocDynamicObjectStd())
	{
		objA1.update_address = 0x063c3e
	}

	Kosinski.addToDMAQueue(0x172214, 0xa000)
}

//# address-hook(0x063a6a) end(0x063a86)
function void fn063a6a()
{
	if (XtraChar == 91 && Mods.isModActive("Sonic 3: D.A. Garden Edition") && Sonic.CountCAM > 0)
	{
		DAGLRZ2CAM()
	}
	base.fn063a6a()	
}

//also eggrobo  Y < 0199 and X > 38A0 has to die much earlier
//MOVES CAMERA LIMIT to 3800
function void DAGLRZ2CAM()
{
	//move camera by 1 px
	move_area.left = move_area.left +1
	u16 coord = move_area.left
	Sonic.CountCAM = Sonic.CountCAM +1
	//System.writeDisplayLine(stringformat("areax: %06x", coord))
	if (coord >= 0x3800)
	//if (Glicthes.CountCAM == 41)
	{
		Sonic.CountCAM = 0
	}
}